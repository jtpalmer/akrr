# Authors: Nikolay Simakov, Charng-Da Lu
info = """MPI-Tile-IO

MPI-Tile-IO measures the performance of a storage system under a noncontiguous access workload.
It uses the MPI IO library to read and write a 2D and 3D grid (which is distributed evenly among all MPI processes) 
against a single file, and it reports the aggregate I/O throughput
"""

walllimit = 180

parser = "mpi_tile_io_parser.py"

# path to run script relative to AppKerDir on particular resource
executable = "execs/mpi-tile-io/src/mpi-tile-io"
input = "inputs"

runScriptPreRun = """
localMemUsageColl="200m"
localMemUsageIndep="100m"
exes="mpi-cube-io
mpi-tile-io
hdf_mpi-cube-io
hdf_mpi-tile-io"

#create working dir
export AKRR_TMP_WORKDIR=`mktemp -d {network_scratch}/mpi_tile_io.XXXXXXXXX`
echo "Temporary working directory: $AKRR_TMP_WORKDIR"
cd $AKRR_TMP_WORKDIR

export AKRR_APPKER_EXEC_DIR={appKerDir}/execs/mpi-tile-io/src

#Copy inputs
#cp {appKerDir}/{input} ./
#INPUT=$(echo {appKerDir}/{input} | xargs basename )

#Generate AppKer signature
for exe in $exes
do
    if [ ! -f {appKerDir}/execs/mpi-tile-io/src/$exe ]
    then
        echo "mpi-tile-io: Cannot find {appKerDir}/execs/mpi-tile-io/src/$exe"
        exit 1
    fi
    appsigcheck.sh {appKerDir}/execs/mpi-tile-io/src/$exe >> $AKRR_APP_STDOUT_FILE
done


"""

runScriptPostRun = """
#clean-up
cd $AKRR_TASK_WORKDIR
if [ "${{AKRR_DEBUG=no}}" = "no" ]
then
        echo "Deleting temporary files"
        rm -rf $AKRR_TMP_WORKDIR
else
        echo "Copying temporary files"
        cp -r $AKRR_TMP_WORKDIR workdir
        rm -rf $AKRR_TMP_WORKDIR
fi
"""

runScriptAK = """
# randomize the order of tests
#exes=`echo "$exes" | awk 'BEGIN{{srand();}}{{print rand()"\t"$0}}' | sort -k1 -n | cut -f2 |cat -s`
echo "\\\"appKerStartTime\\\":\\\""`date`"\\\"," >> $AKRR_TASK_WORKDIR/gen.info
for exe in $exes
do
    cmdexe=${{AKRR_APPKER_EXEC_DIR}}/${{exe}}
    
    if [[ !  "$exe" =~ "hdf" ]] ; then
    testFile="$AKRR_TMP_WORKDIR/test_${{exe}}_indep"
    extraOpts="--filename ${{testFile}} --mem_usage ${{localMemUsageIndep}}"
    unset IOR_HINT__MPI__panfs_concurrent_write
    # write test
    echo "Executing ${{RUNMPI}} ${{cmdexe}} --write_file ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"StartTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    eval "${{RUNMPI}} ${{cmdexe}} --write_file ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"EndTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    # read test
    echo "Executing ${{RUNMPI}} ${{cmdexe}} ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"StartTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    [ -f $testFile ] && eval "${{RUNMPI}} ${{cmdexe}} ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"EndTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    rm -f $testFile
    fi

    # now collective IO
    # use a new file name
    testFile="$AKRR_TMP_WORKDIR/test_${{exe}}_coll"
    extraOpts="--filename ${{testFile}} --mem_usage ${{localMemUsageColl}} --collective"
    export IOR_HINT__MPI__panfs_concurrent_write=1
    # write test
    echo "Executing ${{RUNMPI}} ${{cmdexe}} --write_file ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"StartTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    eval "${{RUNMPI}} ${{cmdexe}} --write_file ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"EndTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    # read test
    echo "Executing ${{RUNMPI}} ${{cmdexe}} ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"StartTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    [ -f $testFile ] && eval "${{RUNMPI}} ${{cmdexe}} ${{extraOpts}}" >> $AKRR_APP_STDOUT_FILE 2>&1
    echo "\\\"EndTime\\\":\\\""`date`"\\\"," >> $AKRR_APP_STDOUT_FILE 2>&1
    rm -f $testFile
done
echo "\\\"appKerEndTime\\\":\\\""`date`"\\\"," >> $AKRR_TASK_WORKDIR/gen.info
echo "All Tests Done"
"""

runScript = {}
runScript['edge12core'] = """
#Load application environment
module load intel/13.0 intel-mpi/4.1.0
module list
export I_MPI_PMI_LIBRARY=/usr/lib64/libpmi.so

{runScriptPreRun}

ulimit -s unlimited

RUNMPI="srun"

# MPI IO hints (optional)
# MPI IO hints are environment variables in the following format:
#
# 'IOR_HINT__<layer>__<hint>=<value>', where <layer> is either 'MPI'
# or 'GPFS', <hint> is the full name of the hint to be set, and <value>
# is the hint value.  E.g., 'export IOR_HINT__MPI__IBM_largeblock_io=true'
# 'export IOR_HINT__GPFS__hint=value' in mpi_io_hints
{mpi_io_hints}

echo "Using $AKRR_TMP_WORKDIR for test...."


# run the tests
{runScriptAK}

mpdallexit

{runScriptPostRun}
"""
runScript['edge'] = runScript['edge12core']

runScript['lonestar4'] = """
#Load application environment
#module purge
module load intel/11.1
module load mvapich2/1.6
module load phdf5/1.8.5
module list


{runScriptPreRun}

RUNMPI="ibrun"

# MPI IO hints (optional)
# MPI IO hints are environment variables in the following format:
#
# 'IOR_HINT__<layer>__<hint>=<value>', where <layer> is either 'MPI'
# or 'GPFS', <hint> is the full name of the hint to be set, and <value>
# is the hint value.  E.g., 'export IOR_HINT__MPI__IBM_largeblock_io=true'
# 'export IOR_HINT__GPFS__hint=value' in mpi_io_hints
{mpi_io_hints}

echo "Using $AKRR_TMP_WORKDIR for test...."


# run the tests
{runScriptAK}



{runScriptPostRun}
"""
runScript['trestles'] = """
#Load application environment
#module purge
#module load intel/11.1
#module load mvapich2/1.5.1p1
module load hdf5/1.8.6
module list


{runScriptPreRun}

RUNMPI="mpirun_rsh -np $AKRR_CORES -hostfile $PBS_NODEFILE"

# MPI IO hints (optional)
# MPI IO hints are environment variables in the following format:
#
# 'IOR_HINT__<layer>__<hint>=<value>', where <layer> is either 'MPI'
# or 'GPFS', <hint> is the full name of the hint to be set, and <value>
# is the hint value.  E.g., 'export IOR_HINT__MPI__IBM_largeblock_io=true'
# 'export IOR_HINT__GPFS__hint=value' in mpi_io_hints
{mpi_io_hints}

echo "Using $AKRR_TMP_WORKDIR for test...."


# run the tests
{runScriptAK}



{runScriptPostRun}
"""
runScript['blacklight'] = """
#Load application environment
module load mpt/2.01
module load phdf5/1.8.7
module list


{runScriptPreRun}

export MPI_TYPE_DEPTH=15
RUNMPI="mpirun -np  $AKRR_CORES"

# MPI IO hints (optional)
# MPI IO hints are environment variables in the following format:
#
# 'IOR_HINT__<layer>__<hint>=<value>', where <layer> is either 'MPI'
# or 'GPFS', <hint> is the full name of the hint to be set, and <value>
# is the hint value.  E.g., 'export IOR_HINT__MPI__IBM_largeblock_io=true'
# 'export IOR_HINT__GPFS__hint=value' in mpi_io_hints
{mpi_io_hints}

echo "Using $AKRR_TMP_WORKDIR for test...."


# run the tests
{runScriptAK}



{runScriptPostRun}
"""
runScript['kraken'] = """
#Load application environment
module load hdf5/1.8.9
module list


{runScriptPreRun}

RUNMPI="aprun -n $AKRR_CORES"

cp $AKRR_APPKER_EXEC_DIR/* ./
cp /usr/bin/readlink ./
cp /usr/bin/awk ./
cp /usr/bin/stat ./
export PATH=`pwd`:$PATH

export AKRR_APPKER_EXEC_DIR="./"

# MPI IO hints (optional)
# MPI IO hints are environment variables in the following format:
#
# 'IOR_HINT__<layer>__<hint>=<value>', where <layer> is either 'MPI'
# or 'GPFS', <hint> is the full name of the hint to be set, and <value>
# is the hint value.  E.g., 'export IOR_HINT__MPI__IBM_largeblock_io=true'
# 'export IOR_HINT__GPFS__hint=value' in mpi_io_hints
{mpi_io_hints}

echo "Using $AKRR_TMP_WORKDIR for test...."


# run the tests
{runScriptAK}



{runScriptPostRun}
"""
runScript['gordon'] = """
#Load application environment
module load hdf5/1.8.6
module list


{runScriptPreRun}

RUNMPI="mpirun_rsh -np $AKRR_CORES -hostfile $PBS_NODEFILE"

# MPI IO hints (optional)
# MPI IO hints are environment variables in the following format:
#
# 'IOR_HINT__<layer>__<hint>=<value>', where <layer> is either 'MPI'
# or 'GPFS', <hint> is the full name of the hint to be set, and <value>
# is the hint value.  E.g., 'export IOR_HINT__MPI__IBM_largeblock_io=true'
# 'export IOR_HINT__GPFS__hint=value' in mpi_io_hints
{mpi_io_hints}

echo "Using $AKRR_TMP_WORKDIR for test...."


# run the tests
{runScriptAK}



{runScriptPostRun}
"""
runScript['stampede'] = """
#Load application environment
module swap mvapich2  impi
module load phdf5/1.8.9
module list


{runScriptPreRun}

RUNMPI="ibrun"

# MPI IO hints (optional)
# MPI IO hints are environment variables in the following format:
#
# 'IOR_HINT__<layer>__<hint>=<value>', where <layer> is either 'MPI'
# or 'GPFS', <hint> is the full name of the hint to be set, and <value>
# is the hint value.  E.g., 'export IOR_HINT__MPI__IBM_largeblock_io=true'
# 'export IOR_HINT__GPFS__hint=value' in mpi_io_hints
{mpi_io_hints}

echo "Using $AKRR_TMP_WORKDIR for test...."

# run the tests
{runScriptAK}

{runScriptPostRun}
"""
ErrorsCollecting = """
"""
